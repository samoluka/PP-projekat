

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti token je: " + cur_token.toString(), cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


/*keywords*/
terminal PROG,PRINT,RETURN,BREAK,CLASS,ENUM,ELSE,CONST,IF,DO,WHILE,NEW,READ,EXTENDS,CONTINUE,THIS,SUPER,GOTO,RECORD,VOID;

/* Identifiers and Constants*/
terminal Integer NUMBER;
terminal Integer BOOLEAN;
terminal Character CHARACTER;
terminal String IDENT;


/* Operators */
terminal PLUS,MINUS,MULTIPLY,DEVIDE,EQUALEQUAL,NOTEQUAL,GREATEROREQUAL,LESSOREQUAL,AND,OR,EQUAL,INCREMENT,DECREMENT,SEMI,COLON,DOT,COMMA,LPAREN,RPAREN,LBRACKET,RBRACKET,LBRACE,RBRACE,LESS,GREATER;

nonterminal Program Program;
nonterminal DeclList DeclList;
nonterminal DeclItem DeclItem;
nonterminal ConstDecl ConstDecl;
nonterminal ConstDeclItemList ConstDeclItemList;
nonterminal AssignmentDecl AssignmentDecl;
nonterminal VarDecl VarDecl;
nonterminal VarDeclItemList VarDeclItemList;
nonterminal VarDeclDefinition VarDeclDefinition;
nonterminal RecordDecl RecordDecl;
nonterminal VarDeclList VarDeclList;
nonterminal VarDeclListItem VarDeclListItem;
nonterminal ClassDecl ClassDecl;
nonterminal ClassExtends ClassExtends;
nonterminal ClassMethodDeclItemList ClassMethodDeclItemList;
nonterminal ConstructorDecl ConstructorDecl;
nonterminal ConstructorSingleDecl ConstructorSingleDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal MethodDeclItem MethodDeclItem;
nonterminal MethodDeclListNonEmpty MethodDeclListNonEmpty;
nonterminal Type Type;
nonterminal FormalParams FormalParams;
nonterminal StatementList StatementList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal Statement Statement;
nonterminal Designator Designator;
nonterminal Expr Expr;
nonterminal Term Term;
nonterminal Addop Addop;
nonterminal Const Const;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;


/* Program = ʺprogramʺ ident {ConstDecl | VarDecl | ClassDecl | RecordDecl} ʺ{ʺ {MethodDecl} ʺ}ʺ. */
Program ::= (Program) PROG IDENT:programName DeclList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(programName, D1, M2); RESULT.setLine(programNameleft); :};

DeclList ::= (DeclarationsList) DeclList:D1 DeclItem:D2 {: RESULT=new DeclarationsList(D1, D2); RESULT.setLine(D1left); :}
			|
			(NoDeclList) {: RESULT=new NoDeclList(); :} /* epsilon */
			;
DeclItem ::= (ConstDeclartionItem) ConstDecl:C1 {: RESULT=new ConstDeclartionItem(C1); RESULT.setLine(C1left); :}
		|
		(VarDeclarationItem) VarDecl:V1 {: RESULT=new VarDeclarationItem(V1); RESULT.setLine(V1left); :}
		|
		(RecordDeclarationItem) RecordDecl:R1 {: RESULT=new RecordDeclarationItem(R1); RESULT.setLine(R1left); :}
		|
		(ClassDeclarationItem) ClassDecl:C1 {: RESULT=new ClassDeclarationItem(C1); RESULT.setLine(C1left); :}
		;

/* ʺconstʺ Type identʺ=ʺ(numConst | charConst | boolConst) {, ident ʺ=ʺ (numConst |charConst | boolConst)} ʺ;ʺ.*/

ConstDecl ::=(ConstDecl) CONST Type:T1 ConstDeclItemList:C2 SEMI {: RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); :};

ConstDeclItemList ::= (ConstDeclMultiItemList) ConstDeclItemList:C1 COMMA AssignmentDecl:A2 {: RESULT=new ConstDeclMultiItemList(C1, A2); RESULT.setLine(C1left); :}
				|
				(ConstDeclSingleItemList) AssignmentDecl:A1 {: RESULT=new ConstDeclSingleItemList(A1); RESULT.setLine(A1left); :}
				;
AssignmentDecl ::= (AssignmentDeclaration) IDENT:varName EQUAL Const:C1 {: RESULT=new AssignmentDeclaration(varName, C1); RESULT.setLine(varNameleft); :};
			
/* varDecl = Type ident [ʺ[ʺ ʺ]ʺ] {ʺ,ʺ ident [ʺ[ʺ ʺ]ʺ]} ʺ; */	
VarDecl ::= (VarDeclarations) Type:T1 VarDeclItemList:V2 SEMI {: RESULT=new VarDeclarations(T1, V2); RESULT.setLine(T1left); :}
		|  
		(VarDeclError) error:e SEMI
        {:
        	parser.report_error("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju globalne promenljive do ;", null);
        :} {: RESULT=new VarDeclError(); :}
        ;
VarDeclItemList ::= (VarDeclMultiItemList) VarDeclItemList:V1 COMMA VarDeclDefinition:V2 {: RESULT=new VarDeclMultiItemList(V1, V2); RESULT.setLine(V1left); :}
                    |    
                    (VarDeclSinglItemList) VarDeclDefinition:V1 {: RESULT=new VarDeclSinglItemList(V1); RESULT.setLine(V1left); :}
                    |    
                    (VarDeclItemListError) error:e
                    {:
                    	parser.report_error("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju globalne promenljive do , ili ;", null);
                    :} {: RESULT=new VarDeclItemListError(); :}
                    ;

VarDeclDefinition ::= (Definition) IDENT:name {: RESULT=new Definition(name); RESULT.setLine(nameleft); :}
   					|   
       				(DefinitionArray) IDENT:name LBRACKET RBRACKET {: RESULT=new DefinitionArray(name); RESULT.setLine(nameleft); :}
       				;
 
VarDeclList ::= (VarDeclarationsList) VarDeclList:V1 VarDeclListItem:V2 {: RESULT=new VarDeclarationsList(V1, V2); RESULT.setLine(V1left); :}
                    |    
                    (NoVarDeclList) {: RESULT=new NoVarDeclList(); :} /* epsilon */
                    ;
VarDeclListItem ::= (VarDeclListItem) VarDecl:V1 {: RESULT=new VarDeclListItem(V1); RESULT.setLine(V1left); :};

/* ʺrecordʺ ident ʺ{ʺ {VarDecl} ʺ}ʺ.  */

RecordDecl ::= (RecordDeclarations) RECORD IDENT:name LBRACE VarDeclList:V1 RBRACE {: RESULT=new RecordDeclarations(name, V1); RESULT.setLine(nameleft); :};


/* ClassDecl = ʺclassʺ ident [ʺextendsʺ Type] ʺ{ʺ {VarDecl} [ʺ{ʺ [ConstructorDecl] {MethodDecl} ʺ}ʺ] ʺ}ʺ. */

ClassDecl ::= (ClassDeclarations) CLASS IDENT:className ClassExtends:C1 LBRACE VarDeclList:V2 ClassMethodDeclItemList:C3 RBRACE {: RESULT=new ClassDeclarations(className, C1, V2, C3); RESULT.setLine(classNameleft); :};
ClassExtends ::= (ClassDeclarationsExtends) EXTENDS Type:T1 {: RESULT=new ClassDeclarationsExtends(T1); RESULT.setLine(T1left); :}
			|
			(ClassExtendsError) EXTENDS error:e
			{:
				 parser.report_error("Uspesan oporavak od greske na liniji " + eleft +" za deklaraciju prosirenja natklase, ignorisani znakovi do prvog znaka {", null);
			:} {: RESULT=new ClassExtendsError(); :}
			|
			(ClassNoExtedsError) IDENT:I1 error:e
			{:
				 parser.report_error("Uspesan oporavak od greske na liniji " + eleft +" za deklaraciju prosirenja natklase, ignorisani znakovi do prvog znaka {", null);
			:} {: RESULT=new ClassNoExtedsError(I1); RESULT.setLine(I1left); :}
			|
			(NoClassExtends) {: RESULT=new NoClassExtends(); :} /* epsilon */
			;
ClassMethodDeclItemList ::= (FullClassMethodDeclarationsItemList) LBRACE ConstructorDecl:C1 MethodDeclListNonEmpty:M2 RBRACE {: RESULT=new FullClassMethodDeclarationsItemList(C1, M2); RESULT.setLine(C1left); :}
						|
						(OnlyConstructorClassMethodDeclaration) LBRACE ConstructorDecl:C1 RBRACE {: RESULT=new OnlyConstructorClassMethodDeclaration(C1); RESULT.setLine(C1left); :}
						|
						(OnlyMethodClassMethodDeclaration) LBRACE MethodDeclListNonEmpty:M1 RBRACE {: RESULT=new OnlyMethodClassMethodDeclaration(M1); RESULT.setLine(M1left); :}
						|
						(NoClassMethodDeclItemList) {: RESULT=new NoClassMethodDeclItemList(); :} /* epsilon */
						;


/*ConstructorDecl = ident ʺ(ʺ ʺ)ʺ {VarDecl} ʺ{ʺ {Statement} ʺ}". */

ConstructorDecl ::= (ClassConstructorDeclaration) IDENT:I1 LPAREN RPAREN VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new ClassConstructorDeclaration(I1, V2, S3); RESULT.setLine(I1left); :};



/*MethodDecl = (Type | ʺvoidʺ) ident ʺ(ʺ [FormPars] ʺ)ʺ {VarDecl} ʺ{ʺ {Statement} ʺ}ʺ.*/

MethodDeclListNonEmpty ::= (MethodDeclarationNonEmptyList) MethodDeclListNonEmpty:M1 MethodDecl:M2 {: RESULT=new MethodDeclarationNonEmptyList(M1, M2); RESULT.setLine(M1left); :}
						| 
						(MethodDeclarationNonEmptySingleList) MethodDecl:M1 {: RESULT=new MethodDeclarationNonEmptySingleList(M1); RESULT.setLine(M1left); :}
						;
MethodDeclList ::= (MethodDeclarationList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarationList(M1, M2); RESULT.setLine(M1left); :}
               |
               (NoMethodDeclList) {: RESULT=new NoMethodDeclList(); :} /* epsilon */
               ;
MethodDecl ::= (MethodDeclarationType) Type:retType IDENT:methodName MethodDeclItem:M1 {: RESULT=new MethodDeclarationType(retType, methodName, M1); RESULT.setLine(retTypeleft); :}
           |    
           (MethodDeclarationVoid) VOID IDENT:methodName MethodDeclItem:M1 {: RESULT=new MethodDeclarationVoid(methodName, M1); RESULT.setLine(methodNameleft); :}
           ;
MethodDeclItem ::=  (MethodDeclItem) LPAREN FormalParams:F1 RPAREN VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDeclItem(F1, V2, S3); RESULT.setLine(F1left); :};

FormalParams ::= (FormalParamsList) FormalParamList:n {: RESULT=new FormalParamsList(n); RESULT.setLine(nleft); :}
                 |
                 (NoFormalParamsList) {: RESULT=new NoFormalParamsList(); :} /* epsilon */
                 |
				 (FormalParamErrorComma)  error:e COMMA FormalParamList:n
                 {:
                 	parser.report_error("Uspesan oporavak od greske na liniji " + eleft + " za deklaraciju formalnog parametra funkcije, ignorisani znakovi do znaka , ili )", null);
                 :} {: RESULT=new FormalParamErrorComma(n); RESULT.setLine(nleft); :}
                 |
                 (FormalParamErrorParen) error:e
                 {:
                 	parser.report_error("Uspesan oporavak od greske na liniji " + eleft + " za deklaraciju formalnog parametra funkcije, ignorisani znakovi do znaka , ili )", null);
                 :} {: RESULT=new FormalParamErrorParen(); :};

FormalParamList ::= (FormalParamListActual) FormalParamList:F1 COMMA Type:T2 VarDeclDefinition:V3 {: RESULT=new FormalParamListActual(F1, T2, V3); RESULT.setLine(F1left); :}
                 |    
                 (FormalParamVar) Type:T1 VarDeclDefinition:V2 {: RESULT=new FormalParamVar(T1, V2); RESULT.setLine(T1left); :};
               


Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;
				
Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
		   |
		   (UnmatchedStmt) Unmatched:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :}
		   ; 

Unmatched ::= (UnmatchedIf) IF Expr:E1 Statement:S2 {: RESULT=new UnmatchedIf(E1, S2); RESULT.setLine(E1left); :}
		 	|
		 	(UnmatchedIfElse) IF Expr:E1 Matched:M2 ELSE Unmatched:U3 {: RESULT=new UnmatchedIfElse(E1, M2, U3); RESULT.setLine(E1left); :}
		 	;
		 

Matched ::= (Assignment) Designator:dest EQUAL Expr:e SEMI {: RESULT=new Assignment(dest, e); RESULT.setLine(destleft); :}
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmt(); :}
		   |
		   (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
		   |
		   (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
		   |
		   (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
		   |
		   (MatchedStatement) IF Expr:E1 Matched:M2 ELSE Matched:M3 {: RESULT=new MatchedStatement(E1, M2, M3); RESULT.setLine(E1left); :}
		   ;
			
Expr ::= (AddExpr) Expr:te Addop:A1 Term:t {: RESULT=new AddExpr(te, A1, t); RESULT.setLine(teleft); :}
	 |
	 (TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
	 ;

Term ::= (Term) Const:t {: RESULT=new Term(t); RESULT.setLine(tleft); :};

Const ::= (NumberConst) NUMBER:val {: RESULT=new NumberConst(val); RESULT.setLine(valleft); :}
		|
		(BoolConst) BOOLEAN:val {: RESULT=new BoolConst(val); RESULT.setLine(valleft); :}
		|
		(CharConst) CHARACTER:val {: RESULT=new CharConst(val); RESULT.setLine(valleft); :}
		;
		
ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :}
			|
			(NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				|
				(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
				;
				
Designator ::= (Designator) IDENT:name {: RESULT=new Designator(name); RESULT.setLine(nameleft); :};

Addop ::= (Addop) PLUS {: RESULT=new Addop(); :};
		
		

