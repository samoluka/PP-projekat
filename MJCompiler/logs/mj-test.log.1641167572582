INFO  00:52:11,067 - Compiling source file: C:\Users\Luka\Desktop\projekat pp\MJCompiler\test\program.mj
INFO  00:52:11,075 - #1 program
INFO  00:52:11,076 - #20 Program
INFO  00:52:11,076 - #5 class
INFO  00:52:11,076 - #20 A
INFO  00:52:11,076 - #43 {
INFO  00:52:11,076 - #20 int
INFO  00:52:11,076 - #20 x
INFO  00:52:11,076 - #45 [
INFO  00:52:11,077 - #46 ]
INFO  00:52:11,077 - #40 ,
INFO  00:52:11,077 - #20 y
INFO  00:52:11,077 - #45 [
INFO  00:52:11,077 - #46 ]
INFO  00:52:11,077 - #39 ;
INFO  00:52:11,077 - #44 }
INFO  00:52:11,077 - #8 const
INFO  00:52:11,078 - #20 int
INFO  00:52:11,078 - #20 pi
INFO  00:52:11,078 - #36 =
INFO  00:52:11,078 - #21 3
INFO  00:52:11,078 - #40 ,
INFO  00:52:11,078 - #20 e
INFO  00:52:11,083 - #36 =
INFO  00:52:11,083 - #21 2
INFO  00:52:11,083 - #39 ;
INFO  00:52:11,083 - #5 class
INFO  00:52:11,083 - #20 B
INFO  00:52:11,083 - #14 extends
INFO  00:52:11,084 - #20 A
INFO  00:52:11,084 - #43 {
INFO  00:52:11,084 - #20 int
INFO  00:52:11,084 - #20 i
INFO  00:52:11,084 - #39 ;
INFO  00:52:11,084 - #43 {
INFO  00:52:11,084 - #20 int
INFO  00:52:11,084 - #20 getValue
INFO  00:52:11,084 - #41 (
INFO  00:52:11,084 - #20 int
INFO  00:52:11,085 - #20 a
INFO  00:52:11,085 - #42 )
INFO  00:52:11,085 - #20 int
INFO  00:52:11,085 - #20 b
INFO  00:52:11,085 - #39 ;
INFO  00:52:11,085 - #20 bool
INFO  00:52:11,085 - #20 c
INFO  00:52:11,085 - #39 ;
INFO  00:52:11,085 - #43 {
INFO  00:52:11,085 - #3 return
INFO  00:52:11,086 - #16 this
INFO  00:52:11,086 - #20 i
INFO  00:52:11,086 - #24 +
INFO  00:52:11,086 - #16 this
INFO  00:52:11,086 - #20 x
INFO  00:52:11,086 - #45 [
INFO  00:52:11,086 - #21 0
INFO  00:52:11,086 - #46 ]
INFO  00:52:11,087 - #24 +
INFO  00:52:11,087 - #20 a
INFO  00:52:11,087 - #39 ;
INFO  00:52:11,087 - #44 }
INFO  00:52:11,087 - #50 void
INFO  00:52:11,087 - #20 m
INFO  00:52:11,087 - #41 (
INFO  00:52:11,087 - #42 )
INFO  00:52:11,087 - #43 {
INFO  00:52:11,087 - #44 }
INFO  00:52:11,087 - #44 }
INFO  00:52:11,088 - #44 }
INFO  00:52:11,088 - #5 class
INFO  00:52:11,088 - #20 C
INFO  00:52:11,088 - #14 extends
INFO  00:52:11,088 - #20 B
INFO  00:52:11,088 - #43 {
INFO  00:52:11,088 - #20 A
INFO  00:52:11,088 - #20 theA
INFO  00:52:11,088 - #39 ;
INFO  00:52:11,088 - #20 int
INFO  00:52:11,089 - #20 a
INFO  00:52:11,089 - #39 ;
INFO  00:52:11,089 - #44 }
INFO  00:52:11,089 - #43 {
INFO  00:52:11,089 - #50 void
INFO  00:52:11,089 - #20 main
INFO  00:52:11,089 - #41 (
INFO  00:52:11,089 - #42 )
INFO  00:52:11,089 - #20 A
INFO  00:52:11,089 - #20 a
INFO  00:52:11,089 - #39 ;
INFO  00:52:11,089 - #20 C
INFO  00:52:11,090 - #20 c
INFO  00:52:11,090 - #39 ;
INFO  00:52:11,090 - #20 int
INFO  00:52:11,090 - #20 i
INFO  00:52:11,090 - #39 ;
INFO  00:52:11,090 - #20 int
INFO  00:52:11,090 - #20 x
INFO  00:52:11,090 - #45 [
INFO  00:52:11,090 - #46 ]
INFO  00:52:11,091 - #39 ;
INFO  00:52:11,091 - #20 char
INFO  00:52:11,091 - #20 ch
INFO  00:52:11,091 - #39 ;
INFO  00:52:11,091 - #43 {
INFO  00:52:11,091 - #20 a
INFO  00:52:11,091 - #36 =
INFO  00:52:11,091 - #12 new
INFO  00:52:11,091 - #20 A
INFO  00:52:11,091 - #39 ;
INFO  00:52:11,091 - #20 a
INFO  00:52:11,091 - #20 x
INFO  00:52:11,092 - #36 =
INFO  00:52:11,092 - #12 new
INFO  00:52:11,092 - #20 int
INFO  00:52:11,092 - #45 [
INFO  00:52:11,092 - #21 5
INFO  00:52:11,092 - #46 ]
INFO  00:52:11,092 - #39 ;
INFO  00:52:11,092 - #20 a
INFO  00:52:11,092 - #20 y
INFO  00:52:11,092 - #36 =
INFO  00:52:11,093 - #12 new
INFO  00:52:11,093 - #20 int
INFO  00:52:11,093 - #45 [
INFO  00:52:11,093 - #21 5
INFO  00:52:11,093 - #46 ]
INFO  00:52:11,093 - #39 ;
INFO  00:52:11,093 - #20 c
INFO  00:52:11,093 - #36 =
INFO  00:52:11,093 - #12 new
INFO  00:52:11,093 - #20 C
INFO  00:52:11,094 - #39 ;
INFO  00:52:11,094 - #20 c
INFO  00:52:11,094 - #20 theA
INFO  00:52:11,094 - #36 =
INFO  00:52:11,094 - #20 a
INFO  00:52:11,094 - #39 ;
INFO  00:52:11,094 - #20 c
INFO  00:52:11,094 - #20 x
INFO  00:52:11,095 - #36 =
INFO  00:52:11,095 - #12 new
INFO  00:52:11,095 - #20 int
INFO  00:52:11,095 - #45 [
INFO  00:52:11,095 - #21 5
INFO  00:52:11,095 - #46 ]
INFO  00:52:11,095 - #39 ;
INFO  00:52:11,095 - #20 x
INFO  00:52:11,095 - #36 =
INFO  00:52:11,095 - #12 new
INFO  00:52:11,095 - #20 int
INFO  00:52:11,095 - #45 [
INFO  00:52:11,096 - #21 3
INFO  00:52:11,096 - #46 ]
INFO  00:52:11,096 - #39 ;
INFO  00:52:11,096 - #13 read
INFO  00:52:11,096 - #41 (
INFO  00:52:11,096 - #20 c
INFO  00:52:11,096 - #20 i
INFO  00:52:11,096 - #42 )
INFO  00:52:11,096 - #39 ;
INFO  00:52:11,096 - #20 i
INFO  00:52:11,096 - #36 =
INFO  00:52:11,097 - #21 0
INFO  00:52:11,097 - #39 ;
INFO  00:52:11,097 - #10 do
INFO  00:52:11,097 - #43 {
INFO  00:52:11,097 - #13 read
INFO  00:52:11,097 - #41 (
INFO  00:52:11,097 - #20 c
INFO  00:52:11,097 - #20 x
INFO  00:52:11,097 - #45 [
INFO  00:52:11,097 - #20 i
INFO  00:52:11,097 - #46 ]
INFO  00:52:11,097 - #42 )
INFO  00:52:11,098 - #39 ;
INFO  00:52:11,098 - #13 read
INFO  00:52:11,098 - #41 (
INFO  00:52:11,098 - #20 c
INFO  00:52:11,098 - #20 theA
INFO  00:52:11,098 - #20 x
INFO  00:52:11,098 - #45 [
INFO  00:52:11,098 - #20 i
INFO  00:52:11,098 - #46 ]
INFO  00:52:11,099 - #42 )
INFO  00:52:11,099 - #39 ;
INFO  00:52:11,099 - #20 i
INFO  00:52:11,099 - #28 ++
INFO  00:52:11,099 - #39 ;
INFO  00:52:11,099 - #21 9
INFO  00:52:11,099 - #27 /
INFO  00:52:11,099 - #21 13
INFO  00:52:11,099 - #44 }
INFO  00:52:11,099 - #11 while
INFO  00:52:11,099 - #41 (
INFO  00:52:11,099 - #20 i
INFO  00:52:11,100 - #21 5
INFO  00:52:11,100 - #42 )
INFO  00:52:11,100 - #39 ;
INFO  00:52:11,100 - #2 print
INFO  00:52:11,100 - #41 (
INFO  00:52:11,100 - #20 c
INFO  00:52:11,100 - #20 getValue
INFO  00:52:11,100 - #41 (
INFO  00:52:11,100 - #20 c
INFO  00:52:11,100 - #20 theA
INFO  00:52:11,100 - #20 x
INFO  00:52:11,101 - #45 [
INFO  00:52:11,101 - #21 0
INFO  00:52:11,101 - #46 ]
INFO  00:52:11,101 - #42 )
INFO  00:52:11,101 - #42 )
INFO  00:52:11,101 - #39 ;
INFO  00:52:11,101 - #20 c
INFO  00:52:11,101 - #20 m
INFO  00:52:11,101 - #41 (
INFO  00:52:11,101 - #42 )
INFO  00:52:11,101 - #39 ;
INFO  00:52:11,101 - #44 }
INFO  00:52:11,102 - #44 }
