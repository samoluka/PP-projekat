INFO  00:41:41,047 - Compiling source file: C:\Users\Luka\Desktop\projekat pp\MJCompiler\test\program.mj
INFO  00:41:41,054 - #1 program
INFO  00:41:41,055 - #20 Program
INFO  00:41:41,055 - #5 class
INFO  00:41:41,055 - #20 A
INFO  00:41:41,055 - #43 {
INFO  00:41:41,055 - #20 int
INFO  00:41:41,055 - #20 x
INFO  00:41:41,056 - #45 [
INFO  00:41:41,056 - #46 ]
INFO  00:41:41,056 - #38 ,
INFO  00:41:41,056 - #20 y
INFO  00:41:41,056 - #45 [
INFO  00:41:41,056 - #46 ]
INFO  00:41:41,056 - #39 ;
INFO  00:41:41,056 - #44 }
INFO  00:41:41,056 - #8 const
INFO  00:41:41,057 - #20 int
INFO  00:41:41,057 - #20 pi
INFO  00:41:41,057 - #36 =
INFO  00:41:41,057 - #21 3
INFO  00:41:41,057 - #38 ,
INFO  00:41:41,057 - #20 e
INFO  00:41:41,058 - #36 =
INFO  00:41:41,058 - #21 2
INFO  00:41:41,058 - #39 ;
INFO  00:41:41,058 - #5 class
INFO  00:41:41,058 - #20 B
INFO  00:41:41,058 - #14 extends
INFO  00:41:41,058 - #20 A
INFO  00:41:41,059 - #43 {
INFO  00:41:41,059 - #20 int
INFO  00:41:41,059 - #20 i
INFO  00:41:41,059 - #39 ;
INFO  00:41:41,059 - #43 {
INFO  00:41:41,059 - #20 int
INFO  00:41:41,059 - #20 getValue
INFO  00:41:41,059 - #41 (
INFO  00:41:41,059 - #20 int
INFO  00:41:41,060 - #20 a
INFO  00:41:41,060 - #42 )
INFO  00:41:41,060 - #20 int
INFO  00:41:41,060 - #20 b
INFO  00:41:41,060 - #39 ;
INFO  00:41:41,060 - #20 bool
INFO  00:41:41,060 - #20 c
INFO  00:41:41,060 - #39 ;
INFO  00:41:41,060 - #43 {
INFO  00:41:41,060 - #3 return
INFO  00:41:41,061 - #16 this
INFO  00:41:41,061 - #20 i
INFO  00:41:41,061 - #24 +
INFO  00:41:41,061 - #16 this
INFO  00:41:41,061 - #20 x
INFO  00:41:41,061 - #45 [
INFO  00:41:41,061 - #21 0
INFO  00:41:41,061 - #46 ]
INFO  00:41:41,061 - #24 +
INFO  00:41:41,062 - #20 a
INFO  00:41:41,062 - #39 ;
INFO  00:41:41,062 - #44 }
INFO  00:41:41,062 - #48 void
INFO  00:41:41,062 - #20 m
INFO  00:41:41,062 - #41 (
INFO  00:41:41,062 - #42 )
INFO  00:41:41,062 - #43 {
INFO  00:41:41,062 - #44 }
INFO  00:41:41,063 - #44 }
INFO  00:41:41,063 - #44 }
INFO  00:41:41,063 - #5 class
INFO  00:41:41,063 - #20 C
INFO  00:41:41,063 - #14 extends
INFO  00:41:41,063 - #20 B
INFO  00:41:41,063 - #43 {
INFO  00:41:41,063 - #20 A
INFO  00:41:41,063 - #20 theA
INFO  00:41:41,064 - #39 ;
INFO  00:41:41,064 - #20 int
INFO  00:41:41,064 - #20 a
INFO  00:41:41,064 - #39 ;
INFO  00:41:41,064 - #44 }
INFO  00:41:41,064 - #43 {
INFO  00:41:41,064 - #48 void
INFO  00:41:41,064 - #20 main
INFO  00:41:41,064 - #41 (
INFO  00:41:41,065 - #42 )
INFO  00:41:41,065 - #20 A
INFO  00:41:41,065 - #20 a
INFO  00:41:41,065 - #39 ;
INFO  00:41:41,065 - #20 C
INFO  00:41:41,065 - #20 c
INFO  00:41:41,065 - #39 ;
INFO  00:41:41,065 - #20 int
INFO  00:41:41,065 - #20 i
INFO  00:41:41,065 - #39 ;
INFO  00:41:41,065 - #20 int
INFO  00:41:41,065 - #20 x
INFO  00:41:41,066 - #45 [
INFO  00:41:41,066 - #46 ]
INFO  00:41:41,066 - #39 ;
INFO  00:41:41,066 - #20 char
INFO  00:41:41,066 - #20 ch
INFO  00:41:41,066 - #39 ;
INFO  00:41:41,066 - #43 {
INFO  00:41:41,066 - #20 a
INFO  00:41:41,066 - #36 =
INFO  00:41:41,066 - #12 new
INFO  00:41:41,066 - #20 A
INFO  00:41:41,066 - #39 ;
INFO  00:41:41,067 - #20 a
INFO  00:41:41,067 - #20 x
INFO  00:41:41,067 - #36 =
INFO  00:41:41,067 - #12 new
INFO  00:41:41,067 - #20 int
INFO  00:41:41,067 - #45 [
INFO  00:41:41,067 - #21 5
INFO  00:41:41,067 - #46 ]
INFO  00:41:41,068 - #39 ;
INFO  00:41:41,068 - #20 a
INFO  00:41:41,068 - #20 y
INFO  00:41:41,068 - #36 =
INFO  00:41:41,068 - #12 new
INFO  00:41:41,068 - #20 int
INFO  00:41:41,068 - #45 [
INFO  00:41:41,068 - #21 5
INFO  00:41:41,068 - #46 ]
INFO  00:41:41,068 - #39 ;
INFO  00:41:41,069 - #20 c
INFO  00:41:41,069 - #36 =
INFO  00:41:41,069 - #12 new
INFO  00:41:41,069 - #20 C
INFO  00:41:41,069 - #39 ;
INFO  00:41:41,069 - #20 c
INFO  00:41:41,069 - #20 theA
INFO  00:41:41,069 - #36 =
INFO  00:41:41,069 - #20 a
INFO  00:41:41,069 - #39 ;
INFO  00:41:41,069 - #20 c
INFO  00:41:41,070 - #20 x
INFO  00:41:41,070 - #36 =
INFO  00:41:41,070 - #12 new
INFO  00:41:41,070 - #20 int
INFO  00:41:41,070 - #45 [
INFO  00:41:41,070 - #21 5
INFO  00:41:41,070 - #46 ]
INFO  00:41:41,070 - #39 ;
INFO  00:41:41,070 - #20 x
INFO  00:41:41,070 - #36 =
INFO  00:41:41,070 - #12 new
INFO  00:41:41,071 - #20 int
INFO  00:41:41,071 - #45 [
INFO  00:41:41,071 - #21 3
INFO  00:41:41,071 - #46 ]
INFO  00:41:41,071 - #39 ;
INFO  00:41:41,071 - #13 read
INFO  00:41:41,071 - #41 (
INFO  00:41:41,072 - #20 c
INFO  00:41:41,072 - #20 i
INFO  00:41:41,072 - #42 )
INFO  00:41:41,072 - #39 ;
INFO  00:41:41,072 - #20 i
INFO  00:41:41,072 - #36 =
INFO  00:41:41,072 - #21 0
INFO  00:41:41,072 - #39 ;
INFO  00:41:41,072 - #10 do
INFO  00:41:41,073 - #43 {
INFO  00:41:41,073 - #13 read
INFO  00:41:41,073 - #41 (
INFO  00:41:41,073 - #20 c
INFO  00:41:41,073 - #20 x
INFO  00:41:41,073 - #45 [
INFO  00:41:41,073 - #20 i
INFO  00:41:41,073 - #46 ]
INFO  00:41:41,074 - #42 )
INFO  00:41:41,074 - #39 ;
INFO  00:41:41,074 - #13 read
INFO  00:41:41,074 - #41 (
INFO  00:41:41,074 - #20 c
INFO  00:41:41,074 - #20 theA
INFO  00:41:41,074 - #20 x
INFO  00:41:41,074 - #45 [
INFO  00:41:41,074 - #20 i
INFO  00:41:41,074 - #46 ]
INFO  00:41:41,074 - #42 )
INFO  00:41:41,074 - #39 ;
INFO  00:41:41,075 - #20 i
INFO  00:41:41,075 - #28 ++
INFO  00:41:41,075 - #39 ;
INFO  00:41:41,075 - #21 9
INFO  00:41:41,075 - #27 /
INFO  00:41:41,075 - #21 13
INFO  00:41:41,075 - #44 }
INFO  00:41:41,075 - #11 while
INFO  00:41:41,076 - #41 (
INFO  00:41:41,076 - #20 i
INFO  00:41:41,076 - #21 5
INFO  00:41:41,076 - #42 )
INFO  00:41:41,076 - #39 ;
INFO  00:41:41,076 - #2 print
INFO  00:41:41,076 - #41 (
INFO  00:41:41,076 - #20 c
INFO  00:41:41,076 - #20 getValue
INFO  00:41:41,076 - #41 (
INFO  00:41:41,077 - #20 c
INFO  00:41:41,077 - #20 theA
INFO  00:41:41,077 - #20 x
INFO  00:41:41,077 - #45 [
INFO  00:41:41,077 - #21 0
INFO  00:41:41,077 - #46 ]
INFO  00:41:41,077 - #42 )
INFO  00:41:41,077 - #42 )
INFO  00:41:41,078 - #39 ;
INFO  00:41:41,078 - #20 c
INFO  00:41:41,078 - #20 m
INFO  00:41:41,078 - #41 (
INFO  00:41:41,078 - #42 )
INFO  00:41:41,078 - #39 ;
INFO  00:41:41,078 - #44 }
INFO  00:41:41,078 - #44 }
