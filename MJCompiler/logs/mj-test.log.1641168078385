INFO  01:00:46,017 - Compiling source file: C:\Users\Luka\Desktop\projekat pp\MJCompiler\test\program.mj
INFO  01:00:46,025 - #1 program
INFO  01:00:46,025 - #20 Program
INFO  01:00:46,026 - #5 class
INFO  01:00:46,026 - #20 A
INFO  01:00:46,026 - #43 {
INFO  01:00:46,026 - #20 int
INFO  01:00:46,026 - #20 x
INFO  01:00:46,026 - #45 [
INFO  01:00:46,026 - #46 ]
INFO  01:00:46,026 - #40 ,
INFO  01:00:46,027 - #20 y
INFO  01:00:46,027 - #45 [
INFO  01:00:46,027 - #46 ]
INFO  01:00:46,027 - #39 ;
INFO  01:00:46,027 - #44 }
INFO  01:00:46,027 - #8 const
INFO  01:00:46,027 - #20 int
INFO  01:00:46,027 - #20 pi
INFO  01:00:46,027 - #36 =
INFO  01:00:46,028 - #21 3
INFO  01:00:46,028 - #40 ,
INFO  01:00:46,028 - #20 e
INFO  01:00:46,028 - #36 =
INFO  01:00:46,028 - #21 2
INFO  01:00:46,028 - #39 ;
INFO  01:00:46,029 - #5 class
INFO  01:00:46,029 - #20 B
INFO  01:00:46,029 - #14 extends
INFO  01:00:46,029 - #20 A
INFO  01:00:46,029 - #43 {
INFO  01:00:46,029 - #20 int
INFO  01:00:46,029 - #20 i
INFO  01:00:46,029 - #39 ;
INFO  01:00:46,029 - #43 {
INFO  01:00:46,029 - #20 int
INFO  01:00:46,030 - #20 getValue
INFO  01:00:46,030 - #41 (
INFO  01:00:46,030 - #20 int
INFO  01:00:46,030 - #20 a
INFO  01:00:46,030 - #42 )
INFO  01:00:46,030 - #20 int
INFO  01:00:46,030 - #20 b
INFO  01:00:46,030 - #39 ;
INFO  01:00:46,030 - #20 bool
INFO  01:00:46,030 - #20 c
INFO  01:00:46,030 - #39 ;
INFO  01:00:46,031 - #43 {
INFO  01:00:46,031 - #3 return
INFO  01:00:46,031 - #16 this
INFO  01:00:46,031 - #20 i
INFO  01:00:46,031 - #24 +
INFO  01:00:46,031 - #16 this
INFO  01:00:46,031 - #20 x
INFO  01:00:46,031 - #45 [
INFO  01:00:46,031 - #21 0
INFO  01:00:46,032 - #46 ]
INFO  01:00:46,032 - #24 +
INFO  01:00:46,032 - #20 a
INFO  01:00:46,032 - #39 ;
INFO  01:00:46,032 - #44 }
INFO  01:00:46,032 - #50 void
INFO  01:00:46,032 - #20 m
INFO  01:00:46,032 - #41 (
INFO  01:00:46,032 - #42 )
INFO  01:00:46,032 - #43 {
INFO  01:00:46,033 - #44 }
INFO  01:00:46,033 - #44 }
INFO  01:00:46,033 - #44 }
INFO  01:00:46,033 - #5 class
INFO  01:00:46,033 - #20 C
INFO  01:00:46,033 - #14 extends
INFO  01:00:46,033 - #20 B
INFO  01:00:46,033 - #43 {
INFO  01:00:46,033 - #20 A
INFO  01:00:46,033 - #20 theA
INFO  01:00:46,033 - #39 ;
INFO  01:00:46,033 - #20 int
INFO  01:00:46,034 - #20 a
INFO  01:00:46,034 - #39 ;
INFO  01:00:46,034 - #44 }
INFO  01:00:46,034 - #43 {
INFO  01:00:46,034 - #50 void
INFO  01:00:46,034 - #20 main
INFO  01:00:46,034 - #41 (
INFO  01:00:46,034 - #42 )
INFO  01:00:46,034 - #20 A
INFO  01:00:46,035 - #20 a
INFO  01:00:46,035 - #39 ;
INFO  01:00:46,035 - #20 C
INFO  01:00:46,035 - #20 c
INFO  01:00:46,035 - #39 ;
INFO  01:00:46,035 - #20 int
INFO  01:00:46,035 - #20 i
INFO  01:00:46,035 - #39 ;
INFO  01:00:46,035 - #20 int
INFO  01:00:46,035 - #20 x
INFO  01:00:46,036 - #45 [
INFO  01:00:46,036 - #46 ]
INFO  01:00:46,036 - #39 ;
INFO  01:00:46,036 - #20 char
INFO  01:00:46,036 - #20 ch
INFO  01:00:46,036 - #39 ;
INFO  01:00:46,036 - #43 {
INFO  01:00:46,036 - #20 a
INFO  01:00:46,036 - #36 =
INFO  01:00:46,036 - #12 new
INFO  01:00:46,037 - #20 A
INFO  01:00:46,037 - #39 ;
INFO  01:00:46,037 - #20 a
INFO  01:00:46,037 - #20 x
INFO  01:00:46,037 - #36 =
INFO  01:00:46,037 - #12 new
INFO  01:00:46,037 - #20 int
INFO  01:00:46,038 - #45 [
INFO  01:00:46,038 - #21 5
INFO  01:00:46,038 - #46 ]
INFO  01:00:46,038 - #39 ;
INFO  01:00:46,038 - #20 a
INFO  01:00:46,038 - #20 y
INFO  01:00:46,038 - #36 =
INFO  01:00:46,038 - #12 new
INFO  01:00:46,038 - #20 int
INFO  01:00:46,038 - #45 [
INFO  01:00:46,039 - #21 5
INFO  01:00:46,039 - #46 ]
INFO  01:00:46,039 - #39 ;
INFO  01:00:46,039 - #20 c
INFO  01:00:46,039 - #36 =
INFO  01:00:46,039 - #12 new
INFO  01:00:46,039 - #20 C
INFO  01:00:46,039 - #39 ;
INFO  01:00:46,039 - #20 c
INFO  01:00:46,040 - #20 theA
INFO  01:00:46,040 - #36 =
INFO  01:00:46,040 - #20 a
INFO  01:00:46,040 - #39 ;
INFO  01:00:46,040 - #20 c
INFO  01:00:46,040 - #20 x
INFO  01:00:46,040 - #36 =
INFO  01:00:46,040 - #12 new
INFO  01:00:46,040 - #20 int
INFO  01:00:46,040 - #45 [
INFO  01:00:46,040 - #21 5
INFO  01:00:46,041 - #46 ]
INFO  01:00:46,041 - #39 ;
INFO  01:00:46,041 - #20 x
INFO  01:00:46,041 - #36 =
INFO  01:00:46,041 - #12 new
INFO  01:00:46,041 - #20 int
INFO  01:00:46,041 - #45 [
INFO  01:00:46,041 - #21 3
INFO  01:00:46,041 - #46 ]
INFO  01:00:46,041 - #39 ;
INFO  01:00:46,042 - #13 read
INFO  01:00:46,042 - #41 (
INFO  01:00:46,042 - #20 c
INFO  01:00:46,042 - #20 i
INFO  01:00:46,042 - #42 )
INFO  01:00:46,042 - #39 ;
INFO  01:00:46,042 - #20 i
INFO  01:00:46,042 - #36 =
INFO  01:00:46,042 - #21 0
INFO  01:00:46,042 - #39 ;
INFO  01:00:46,042 - #10 do
INFO  01:00:46,043 - #43 {
INFO  01:00:46,043 - #13 read
INFO  01:00:46,043 - #41 (
INFO  01:00:46,043 - #20 c
INFO  01:00:46,043 - #20 x
INFO  01:00:46,043 - #45 [
INFO  01:00:46,043 - #20 i
INFO  01:00:46,043 - #46 ]
INFO  01:00:46,043 - #42 )
INFO  01:00:46,043 - #39 ;
INFO  01:00:46,043 - #13 read
INFO  01:00:46,043 - #41 (
INFO  01:00:46,043 - #20 c
INFO  01:00:46,043 - #20 theA
INFO  01:00:46,044 - #20 x
INFO  01:00:46,044 - #45 [
INFO  01:00:46,044 - #20 i
INFO  01:00:46,044 - #46 ]
INFO  01:00:46,044 - #42 )
INFO  01:00:46,044 - #39 ;
INFO  01:00:46,044 - #20 i
INFO  01:00:46,044 - #28 ++
INFO  01:00:46,044 - #39 ;
INFO  01:00:46,044 - #21 9
INFO  01:00:46,044 - #27 /
INFO  01:00:46,045 - #21 13
INFO  01:00:46,045 - #44 }
INFO  01:00:46,045 - #11 while
INFO  01:00:46,045 - #41 (
INFO  01:00:46,045 - #20 i
INFO  01:00:46,045 - #21 5
INFO  01:00:46,045 - #42 )
INFO  01:00:46,045 - #39 ;
INFO  01:00:46,045 - #2 print
INFO  01:00:46,045 - #41 (
INFO  01:00:46,045 - #20 c
INFO  01:00:46,046 - #20 getValue
INFO  01:00:46,046 - #41 (
INFO  01:00:46,046 - #20 c
INFO  01:00:46,046 - #20 theA
INFO  01:00:46,046 - #20 x
INFO  01:00:46,047 - #45 [
INFO  01:00:46,047 - #21 0
INFO  01:00:46,047 - #46 ]
INFO  01:00:46,047 - #42 )
INFO  01:00:46,047 - #42 )
INFO  01:00:46,047 - #39 ;
INFO  01:00:46,047 - #20 c
INFO  01:00:46,048 - #20 m
INFO  01:00:46,048 - #41 (
INFO  01:00:46,048 - #42 )
INFO  01:00:46,048 - #39 ;
INFO  01:00:46,048 - #44 }
INFO  01:00:46,048 - #44 }
