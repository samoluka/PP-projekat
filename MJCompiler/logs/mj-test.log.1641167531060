INFO  00:51:10,574 - Compiling source file: C:\Users\Luka\Desktop\projekat pp\MJCompiler\test\program.mj
INFO  00:51:10,585 - #1 program
INFO  00:51:10,585 - #20 Program
INFO  00:51:10,585 - #5 class
INFO  00:51:10,586 - #20 A
INFO  00:51:10,586 - #43 {
INFO  00:51:10,586 - #20 int
INFO  00:51:10,586 - #20 x
INFO  00:51:10,586 - #45 [
INFO  00:51:10,587 - #46 ]
INFO  00:51:10,587 - #40 ,
INFO  00:51:10,587 - #20 y
INFO  00:51:10,587 - #45 [
INFO  00:51:10,587 - #46 ]
INFO  00:51:10,587 - #39 ;
INFO  00:51:10,587 - #44 }
INFO  00:51:10,587 - #8 const
INFO  00:51:10,588 - #20 int
INFO  00:51:10,588 - #20 pi
INFO  00:51:10,588 - #36 =
INFO  00:51:10,588 - #21 3
INFO  00:51:10,588 - #40 ,
INFO  00:51:10,588 - #20 e
INFO  00:51:10,589 - #36 =
INFO  00:51:10,589 - #21 2
INFO  00:51:10,589 - #39 ;
INFO  00:51:10,589 - #5 class
INFO  00:51:10,589 - #20 B
INFO  00:51:10,589 - #14 extends
INFO  00:51:10,590 - #20 A
INFO  00:51:10,590 - #43 {
INFO  00:51:10,590 - #20 int
INFO  00:51:10,590 - #20 i
INFO  00:51:10,590 - #39 ;
INFO  00:51:10,590 - #43 {
INFO  00:51:10,590 - #20 int
INFO  00:51:10,590 - #20 getValue
INFO  00:51:10,590 - #41 (
INFO  00:51:10,591 - #20 int
INFO  00:51:10,591 - #20 a
INFO  00:51:10,591 - #42 )
INFO  00:51:10,591 - #20 int
INFO  00:51:10,591 - #20 b
INFO  00:51:10,592 - #39 ;
INFO  00:51:10,592 - #20 bool
INFO  00:51:10,592 - #20 c
INFO  00:51:10,592 - #39 ;
INFO  00:51:10,592 - #43 {
INFO  00:51:10,592 - #3 return
INFO  00:51:10,592 - #16 this
INFO  00:51:10,593 - #20 i
INFO  00:51:10,593 - #24 +
INFO  00:51:10,593 - #16 this
INFO  00:51:10,593 - #20 x
INFO  00:51:10,593 - #45 [
INFO  00:51:10,593 - #21 0
INFO  00:51:10,594 - #46 ]
INFO  00:51:10,594 - #24 +
INFO  00:51:10,594 - #20 a
INFO  00:51:10,594 - #39 ;
INFO  00:51:10,594 - #44 }
INFO  00:51:10,594 - #50 void
INFO  00:51:10,594 - #20 m
INFO  00:51:10,594 - #41 (
INFO  00:51:10,595 - #42 )
INFO  00:51:10,595 - #43 {
INFO  00:51:10,595 - #44 }
INFO  00:51:10,595 - #44 }
INFO  00:51:10,595 - #44 }
INFO  00:51:10,595 - #5 class
INFO  00:51:10,595 - #20 C
INFO  00:51:10,595 - #14 extends
INFO  00:51:10,595 - #20 B
INFO  00:51:10,595 - #43 {
INFO  00:51:10,596 - #20 A
INFO  00:51:10,596 - #20 theA
INFO  00:51:10,596 - #39 ;
INFO  00:51:10,596 - #20 int
INFO  00:51:10,596 - #20 a
INFO  00:51:10,596 - #39 ;
INFO  00:51:10,596 - #44 }
INFO  00:51:10,596 - #43 {
INFO  00:51:10,596 - #50 void
INFO  00:51:10,597 - #20 main
INFO  00:51:10,597 - #41 (
INFO  00:51:10,597 - #42 )
INFO  00:51:10,597 - #20 A
INFO  00:51:10,597 - #20 a
INFO  00:51:10,597 - #39 ;
INFO  00:51:10,598 - #20 C
INFO  00:51:10,598 - #20 c
INFO  00:51:10,598 - #39 ;
INFO  00:51:10,598 - #20 int
INFO  00:51:10,598 - #20 i
INFO  00:51:10,598 - #39 ;
INFO  00:51:10,599 - #20 int
INFO  00:51:10,599 - #20 x
INFO  00:51:10,599 - #45 [
INFO  00:51:10,599 - #46 ]
INFO  00:51:10,599 - #39 ;
INFO  00:51:10,599 - #20 char
INFO  00:51:10,599 - #20 ch
INFO  00:51:10,600 - #39 ;
INFO  00:51:10,600 - #43 {
INFO  00:51:10,600 - #20 a
INFO  00:51:10,600 - #36 =
INFO  00:51:10,600 - #12 new
INFO  00:51:10,600 - #20 A
INFO  00:51:10,601 - #39 ;
INFO  00:51:10,601 - #20 a
INFO  00:51:10,601 - #20 x
INFO  00:51:10,601 - #36 =
INFO  00:51:10,601 - #12 new
INFO  00:51:10,601 - #20 int
INFO  00:51:10,601 - #45 [
INFO  00:51:10,602 - #21 5
INFO  00:51:10,602 - #46 ]
INFO  00:51:10,602 - #39 ;
INFO  00:51:10,602 - #20 a
INFO  00:51:10,602 - #20 y
INFO  00:51:10,602 - #36 =
INFO  00:51:10,603 - #12 new
INFO  00:51:10,603 - #20 int
INFO  00:51:10,603 - #45 [
INFO  00:51:10,603 - #21 5
INFO  00:51:10,603 - #46 ]
INFO  00:51:10,603 - #39 ;
INFO  00:51:10,603 - #20 c
INFO  00:51:10,603 - #36 =
INFO  00:51:10,603 - #12 new
INFO  00:51:10,603 - #20 C
INFO  00:51:10,603 - #39 ;
INFO  00:51:10,603 - #20 c
INFO  00:51:10,603 - #20 theA
INFO  00:51:10,604 - #36 =
INFO  00:51:10,604 - #20 a
INFO  00:51:10,604 - #39 ;
INFO  00:51:10,604 - #20 c
INFO  00:51:10,604 - #20 x
INFO  00:51:10,604 - #36 =
INFO  00:51:10,605 - #12 new
INFO  00:51:10,605 - #20 int
INFO  00:51:10,605 - #45 [
INFO  00:51:10,605 - #21 5
INFO  00:51:10,605 - #46 ]
INFO  00:51:10,605 - #39 ;
INFO  00:51:10,605 - #20 x
INFO  00:51:10,606 - #36 =
INFO  00:51:10,606 - #12 new
INFO  00:51:10,606 - #20 int
INFO  00:51:10,606 - #45 [
INFO  00:51:10,606 - #21 3
INFO  00:51:10,606 - #46 ]
INFO  00:51:10,606 - #39 ;
INFO  00:51:10,607 - #13 read
INFO  00:51:10,607 - #41 (
INFO  00:51:10,607 - #20 c
INFO  00:51:10,607 - #20 i
INFO  00:51:10,607 - #42 )
INFO  00:51:10,607 - #39 ;
INFO  00:51:10,607 - #20 i
INFO  00:51:10,608 - #36 =
INFO  00:51:10,608 - #21 0
INFO  00:51:10,608 - #39 ;
INFO  00:51:10,608 - #10 do
INFO  00:51:10,608 - #43 {
INFO  00:51:10,608 - #13 read
INFO  00:51:10,609 - #41 (
INFO  00:51:10,609 - #20 c
INFO  00:51:10,609 - #20 x
INFO  00:51:10,609 - #45 [
INFO  00:51:10,609 - #20 i
INFO  00:51:10,609 - #46 ]
INFO  00:51:10,609 - #42 )
INFO  00:51:10,610 - #39 ;
INFO  00:51:10,610 - #13 read
INFO  00:51:10,610 - #41 (
INFO  00:51:10,610 - #20 c
INFO  00:51:10,610 - #20 theA
INFO  00:51:10,610 - #20 x
INFO  00:51:10,611 - #45 [
INFO  00:51:10,611 - #20 i
INFO  00:51:10,611 - #46 ]
INFO  00:51:10,611 - #42 )
INFO  00:51:10,611 - #39 ;
INFO  00:51:10,611 - #20 i
INFO  00:51:10,611 - #28 ++
INFO  00:51:10,611 - #39 ;
INFO  00:51:10,611 - #21 9
INFO  00:51:10,611 - #27 /
INFO  00:51:10,611 - #21 13
INFO  00:51:10,611 - #44 }
INFO  00:51:10,612 - #11 while
INFO  00:51:10,612 - #41 (
INFO  00:51:10,612 - #20 i
INFO  00:51:10,612 - #21 5
INFO  00:51:10,612 - #42 )
INFO  00:51:10,612 - #39 ;
INFO  00:51:10,612 - #2 print
INFO  00:51:10,612 - #41 (
INFO  00:51:10,612 - #20 c
INFO  00:51:10,612 - #20 getValue
INFO  00:51:10,612 - #41 (
INFO  00:51:10,612 - #20 c
INFO  00:51:10,613 - #20 theA
INFO  00:51:10,613 - #20 x
INFO  00:51:10,613 - #45 [
INFO  00:51:10,613 - #21 0
INFO  00:51:10,613 - #46 ]
INFO  00:51:10,613 - #42 )
INFO  00:51:10,613 - #42 )
INFO  00:51:10,613 - #39 ;
INFO  00:51:10,613 - #20 c
INFO  00:51:10,613 - #20 m
INFO  00:51:10,613 - #41 (
INFO  00:51:10,614 - #42 )
INFO  00:51:10,614 - #39 ;
INFO  00:51:10,614 - #44 }
INFO  00:51:10,614 - #44 }
