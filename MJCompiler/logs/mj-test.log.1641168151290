INFO  01:02:13,383 - Compiling source file: C:\Users\Luka\Desktop\projekat pp\MJCompiler\test\program.mj
INFO  01:02:13,390 - #1 program
INFO  01:02:13,390 - #20 Program
INFO  01:02:13,391 - #5 class
INFO  01:02:13,391 - #20 A
INFO  01:02:13,391 - #43 {
INFO  01:02:13,391 - #20 int
INFO  01:02:13,391 - #20 x
INFO  01:02:13,391 - #45 [
INFO  01:02:13,391 - #46 ]
INFO  01:02:13,391 - #40 ,
INFO  01:02:13,392 - #20 y
INFO  01:02:13,392 - #45 [
INFO  01:02:13,392 - #46 ]
INFO  01:02:13,392 - #39 ;
INFO  01:02:13,392 - #44 }
INFO  01:02:13,392 - #8 const
INFO  01:02:13,392 - #20 int
INFO  01:02:13,393 - #20 pi
INFO  01:02:13,393 - #36 =
INFO  01:02:13,393 - #21 3
INFO  01:02:13,393 - #40 ,
INFO  01:02:13,393 - #20 e
INFO  01:02:13,393 - #36 =
INFO  01:02:13,394 - #21 2
INFO  01:02:13,394 - #39 ;
INFO  01:02:13,394 - #5 class
INFO  01:02:13,394 - #20 B
INFO  01:02:13,394 - #14 extends
INFO  01:02:13,394 - #20 A
INFO  01:02:13,394 - #43 {
INFO  01:02:13,394 - #20 int
INFO  01:02:13,394 - #20 i
INFO  01:02:13,394 - #39 ;
INFO  01:02:13,395 - #43 {
INFO  01:02:13,395 - #20 int
INFO  01:02:13,395 - #20 getValue
INFO  01:02:13,395 - #41 (
INFO  01:02:13,395 - #20 int
INFO  01:02:13,395 - #20 a
INFO  01:02:13,395 - #42 )
INFO  01:02:13,395 - #20 int
INFO  01:02:13,395 - #20 b
INFO  01:02:13,395 - #39 ;
INFO  01:02:13,396 - #20 bool
INFO  01:02:13,396 - #20 c
INFO  01:02:13,396 - #39 ;
INFO  01:02:13,396 - #43 {
INFO  01:02:13,396 - #3 return
INFO  01:02:13,396 - #16 this
INFO  01:02:13,396 - #20 i
INFO  01:02:13,396 - #24 +
INFO  01:02:13,396 - #16 this
INFO  01:02:13,397 - #20 x
INFO  01:02:13,397 - #45 [
INFO  01:02:13,397 - #21 0
INFO  01:02:13,397 - #46 ]
INFO  01:02:13,397 - #24 +
INFO  01:02:13,397 - #20 a
INFO  01:02:13,397 - #39 ;
INFO  01:02:13,397 - #44 }
INFO  01:02:13,397 - #50 void
INFO  01:02:13,397 - #20 m
INFO  01:02:13,397 - #41 (
INFO  01:02:13,398 - #42 )
INFO  01:02:13,398 - #43 {
INFO  01:02:13,398 - #44 }
INFO  01:02:13,398 - #44 }
INFO  01:02:13,398 - #44 }
INFO  01:02:13,398 - #5 class
INFO  01:02:13,398 - #20 C
INFO  01:02:13,398 - #14 extends
INFO  01:02:13,398 - #20 B
INFO  01:02:13,398 - #43 {
INFO  01:02:13,398 - #20 A
INFO  01:02:13,399 - #20 theA
INFO  01:02:13,399 - #39 ;
INFO  01:02:13,399 - #20 int
INFO  01:02:13,399 - #20 a
INFO  01:02:13,399 - #39 ;
INFO  01:02:13,399 - #44 }
INFO  01:02:13,399 - #43 {
INFO  01:02:13,399 - #50 void
INFO  01:02:13,399 - #20 main
INFO  01:02:13,399 - #41 (
INFO  01:02:13,399 - #42 )
INFO  01:02:13,400 - #20 A
INFO  01:02:13,400 - #20 a
INFO  01:02:13,400 - #39 ;
INFO  01:02:13,400 - #20 C
INFO  01:02:13,400 - #20 c
INFO  01:02:13,400 - #39 ;
INFO  01:02:13,400 - #20 int
INFO  01:02:13,400 - #20 i
INFO  01:02:13,400 - #39 ;
INFO  01:02:13,400 - #20 int
INFO  01:02:13,400 - #20 x
INFO  01:02:13,400 - #45 [
INFO  01:02:13,401 - #46 ]
INFO  01:02:13,401 - #39 ;
INFO  01:02:13,401 - #20 char
INFO  01:02:13,401 - #20 ch
INFO  01:02:13,401 - #39 ;
INFO  01:02:13,401 - #43 {
INFO  01:02:13,401 - #20 a
INFO  01:02:13,401 - #36 =
INFO  01:02:13,401 - #12 new
INFO  01:02:13,401 - #20 A
INFO  01:02:13,401 - #39 ;
INFO  01:02:13,401 - #20 a
INFO  01:02:13,402 - #20 x
INFO  01:02:13,402 - #36 =
INFO  01:02:13,402 - #12 new
INFO  01:02:13,402 - #20 int
INFO  01:02:13,402 - #45 [
INFO  01:02:13,402 - #21 5
INFO  01:02:13,402 - #46 ]
INFO  01:02:13,402 - #39 ;
INFO  01:02:13,402 - #20 a
INFO  01:02:13,402 - #20 y
INFO  01:02:13,402 - #36 =
INFO  01:02:13,403 - #12 new
INFO  01:02:13,403 - #20 int
INFO  01:02:13,403 - #45 [
INFO  01:02:13,403 - #21 5
INFO  01:02:13,403 - #46 ]
INFO  01:02:13,403 - #39 ;
INFO  01:02:13,403 - #20 c
INFO  01:02:13,403 - #36 =
INFO  01:02:13,403 - #12 new
INFO  01:02:13,404 - #20 C
INFO  01:02:13,404 - #39 ;
INFO  01:02:13,404 - #20 c
INFO  01:02:13,404 - #20 theA
INFO  01:02:13,404 - #36 =
INFO  01:02:13,404 - #20 a
INFO  01:02:13,404 - #39 ;
INFO  01:02:13,404 - #20 c
INFO  01:02:13,404 - #20 x
INFO  01:02:13,405 - #36 =
INFO  01:02:13,405 - #12 new
INFO  01:02:13,405 - #20 int
INFO  01:02:13,405 - #45 [
INFO  01:02:13,405 - #21 5
INFO  01:02:13,405 - #46 ]
INFO  01:02:13,405 - #39 ;
INFO  01:02:13,405 - #20 x
INFO  01:02:13,406 - #36 =
INFO  01:02:13,406 - #12 new
INFO  01:02:13,406 - #20 int
INFO  01:02:13,406 - #45 [
INFO  01:02:13,406 - #21 3
INFO  01:02:13,406 - #46 ]
INFO  01:02:13,406 - #39 ;
INFO  01:02:13,406 - #13 read
INFO  01:02:13,406 - #41 (
INFO  01:02:13,406 - #20 c
INFO  01:02:13,406 - #20 i
INFO  01:02:13,406 - #42 )
INFO  01:02:13,407 - #39 ;
INFO  01:02:13,407 - #20 i
INFO  01:02:13,407 - #36 =
INFO  01:02:13,407 - #21 0
INFO  01:02:13,407 - #39 ;
INFO  01:02:13,407 - #10 do
INFO  01:02:13,407 - #43 {
INFO  01:02:13,407 - #13 read
INFO  01:02:13,407 - #41 (
INFO  01:02:13,407 - #20 c
INFO  01:02:13,407 - #20 x
INFO  01:02:13,407 - #45 [
INFO  01:02:13,408 - #20 i
INFO  01:02:13,408 - #46 ]
INFO  01:02:13,408 - #42 )
INFO  01:02:13,408 - #39 ;
INFO  01:02:13,408 - #13 read
INFO  01:02:13,408 - #41 (
INFO  01:02:13,408 - #20 c
INFO  01:02:13,408 - #20 theA
INFO  01:02:13,408 - #20 x
INFO  01:02:13,408 - #45 [
INFO  01:02:13,408 - #20 i
INFO  01:02:13,408 - #46 ]
INFO  01:02:13,409 - #42 )
INFO  01:02:13,409 - #39 ;
INFO  01:02:13,409 - #20 i
INFO  01:02:13,409 - #28 ++
INFO  01:02:13,409 - #39 ;
INFO  01:02:13,409 - #21 9
INFO  01:02:13,409 - #27 /
INFO  01:02:13,409 - #21 13
INFO  01:02:13,409 - #44 }
INFO  01:02:13,409 - #11 while
INFO  01:02:13,409 - #41 (
INFO  01:02:13,409 - #20 i
INFO  01:02:13,410 - #21 5
INFO  01:02:13,410 - #42 )
INFO  01:02:13,410 - #39 ;
INFO  01:02:13,410 - #2 print
INFO  01:02:13,410 - #41 (
INFO  01:02:13,410 - #20 c
INFO  01:02:13,410 - #20 getValue
INFO  01:02:13,410 - #41 (
INFO  01:02:13,410 - #20 c
INFO  01:02:13,410 - #20 theA
INFO  01:02:13,410 - #20 x
INFO  01:02:13,411 - #45 [
INFO  01:02:13,411 - #21 0
INFO  01:02:13,411 - #46 ]
INFO  01:02:13,411 - #42 )
INFO  01:02:13,411 - #42 )
INFO  01:02:13,411 - #39 ;
INFO  01:02:13,411 - #20 c
INFO  01:02:13,411 - #20 m
INFO  01:02:13,411 - #41 (
INFO  01:02:13,411 - #42 )
INFO  01:02:13,411 - #39 ;
INFO  01:02:13,411 - #44 }
INFO  01:02:13,412 - #44 }
