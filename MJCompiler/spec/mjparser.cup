

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   	boolean errorDetected = false;
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
      errorDetected = true;
    }
  
    public void syntax_error(Symbol cur_token) {   	
        report_error("\nSintaksna greska", cur_token);
        errorDetected = true;
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti token je: " + cur_token.toString(), cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	errorDetected = true;
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


/*keywords*/
terminal PROG,PRINT,RETURN,BREAK,CLASS,ENUM,ELSE,CONST,IF,DO,WHILE,NEW,READ,EXTENDS,CONTINUE,THIS,SUPER,GOTO,RECORD,VOID;

/* Identifiers and Constants*/
terminal Integer NUMBER;
terminal Integer BOOLEAN;
terminal Character CHARACTER;
terminal String IDENT;


/* Operators */
terminal PLUS,MINUS,MULTIPLY, MOD, DEVIDE,EQUALEQUAL,NOTEQUAL,GREATEROREQUAL,LESSOREQUAL,AND,OR,EQUAL,INCREMENT,DECREMENT,SEMI,COLON,DOT,COMMA,LPAREN,RPAREN,LBRACKET,RBRACKET,LBRACE,RBRACE,LESS,GREATER;

nonterminal DeclList, DeclItem, ConstDeclItemList, AssignmentDecl, VarDecl, VarDeclItemList, RecordDecl, VarDeclList, VarDeclListItem;
nonterminal ClassDecl, ClassExtends, ClassMethodDeclItemList, ConstructorDecl, MethodDeclList, MethodDeclItem, MethodDeclListNonEmpty;
nonterminal StatementList, SingleStatement, Statement, StatementLabel, ElseStatement, DesignatorStatement, Assignop;
nonterminal FormalParams, FormalParamList, Relop, FormalParamListItem;
nonterminal Addop, Mulop, ActualPars, ActualParamSingleItem;
nonterminal VarListClass, VarItemListClass, VarClass, VarClassErrorEndPoint, IfPart, IfHeader, IfStart, DoStart, DoPart;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, ClassName, RecordName, Program, MethodDecl, MethodTypeName, Designator, DesignatorForMethodCall, MethodNameDesignator;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstDeclHeader,ConstDecl,FactorForConst, Condition, CondTerm, CondFact, ConstructorHeader, Factor, Label, SuperStart;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, VarDeclDefinition, DesignatorForAssign;



precedence left ELSE;

/* Program = ʺprogramʺ ident {ConstDecl | VarDecl | ClassDecl | RecordDecl} ʺ{ʺ {} ʺ}ʺ. */

Program ::= (Program) PROG ProgName:p DeclList LBRACE MethodDeclList RBRACE;
ProgName ::= (ProgName) IDENT:progName;

DeclList ::= (DeclarationsList) DeclList DeclItem
			|
			(NoDeclList) /* epsilon */
			;
DeclItem ::= (ConstDeclartionItem) ConstDecl
		|
		(VarDeclarationItem) VarDecl
		|
		(RecordDeclarationItem) RecordDecl
		|
		(ClassDeclarationItem) ClassDecl
		;

/* ʺconstʺ Type identʺ=ʺ(numConst | charConst | boolConst) {, ident ʺ=ʺ (numConst |charConst | boolConst)} ʺ;ʺ.*/

ConstDecl ::=(ConstDecl) ConstDeclHeader ConstDeclItemList SEMI;

ConstDeclHeader ::= (ConstDeclHeader) CONST Type;

ConstDeclItemList ::= (ConstDeclMultiItemList) ConstDeclItemList COMMA AssignmentDecl
				|
				(ConstDeclSingleItemList) AssignmentDecl
				;
AssignmentDecl ::= (AssignmentDeclaration) IDENT:varName EQUAL FactorForConst
				|
				(AssignmentDeclError) error:e
				{:
					parser.report_error("Uspesan oporavak od greske na liniji " + eleft + " pri dodeli vrednosti do ;", null);
				:}
				;
			
/* varDecl = Type ident [ʺ[ʺ ʺ]ʺ] {ʺ,ʺ ident [ʺ[ʺ ʺ]ʺ]} ʺ; */	
VarDecl ::= (VarDeclarations) Type:t VarDeclItemList SEMI
		|  
		(VarDeclError) error:e SEMI
        {:
        	parser.report_error("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju globalne promenljive do ;", null);
        :}
        ;
VarDeclItemList ::= (VarDeclMultiItemList) VarDeclItemList COMMA VarDeclDefinition
                    |    
                    (VarDeclSinglItemList) VarDeclDefinition
                    |    
                    (VarDeclItemListError) error:e
                    {:
                    	parser.report_error("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju globalne promenljive do , ili ;", null);
                    :}
                    ;

VarDeclDefinition ::= (Definition) IDENT:name
   					|   
       				(DefinitionArray) IDENT:name LBRACKET RBRACKET
       				;
 
VarDeclList ::= (VarDeclarationsList) VarDeclList VarDeclListItem
                    |    
                    (NoVarDeclList) /* epsilon */
                    ;
VarDeclListItem ::= (VarDeclListItem) VarDecl;

/* ʺrecordʺ ident ʺ{ʺ {VarDecl} ʺ}ʺ.  */

RecordDecl ::= (RecordDeclarations) RecordName LBRACE VarListClass RBRACE;
RecordName ::= (RecordName) RECORD IDENT:name;

/* ClassDecl = ʺclassʺ ident [ʺextendsʺ Type] ʺ{ʺ {VarDecl} [ʺ{ʺ [ConstructorDecl] {MethodDecl} ʺ}ʺ] ʺ}ʺ. */

VarClass ::= (VarClassNonError) Type VarItemListClass SEMI
                    | 
                    (VarErrorClass) error:e VarClassErrorEndPoint:end
       				{:
        				parser.report_error("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju klasne promenljive do ; ili {", null);
       				:}
       				;
VarClassErrorEndPoint ::= SEMI
					|
					/* epsilon */
					;
VarListClass ::= (VarListClassNonEmpty) VarListClass VarClass
       				|
                    (NoVarDeclListClLass) /* epsilon */
                    ;
VarItemListClass ::= (VarMultiItemListClass) VarItemListClass COMMA VarDeclDefinition
                    |    
                    (VarSinglItemListClass) VarDeclDefinition
                    ;

ClassDecl ::= (ClassDeclarations) ClassName ClassExtends LBRACE VarListClass ClassMethodDeclItemList RBRACE;
ClassName ::= (ClassName) CLASS IDENT:className;
			
ClassExtends ::= (ClassDeclarationsExtends) EXTENDS Type
			|
			(ClassExtendsError) EXTENDS error:e
			{:
				 parser.report_error("Uspesan oporavak od greske na liniji " + eleft +" za deklaraciju prosirenja natklase, ignorisani znakovi do prvog znaka {", null);
			:}
			|
			(ClassNoExtedsError) IDENT:i1 error:e
			{:
				parser.report_error("Uspesan oporavak od greske na liniji " + eleft +" za deklaraciju prosirenja natklase, ignorisani znakovi do prvog znaka {", null);
			:}					
			|
			(NoClassExtends) /* epsilon */
			;
ClassMethodDeclItemList ::= (FullClassMethodDeclarationsItemList) LBRACE ConstructorDecl MethodDeclListNonEmpty RBRACE
						|
						(OnlyConstructorClassMethodDeclaration) LBRACE ConstructorDecl RBRACE
						|
						(OnlyMethodClassMethodDeclaration) LBRACE MethodDeclListNonEmpty RBRACE
						|
						(NoClassMethodDeclItemList) /* epsilon */
						;

/*ConstructorDecl = ident ʺ(ʺ ʺ)ʺ {VarDecl} ʺ{ʺ {Statement} ʺ}". */

ConstructorDecl ::= (ClassConstructorDeclaration) ConstructorHeader VarDeclList LBRACE StatementList RBRACE;
ConstructorHeader ::= (ConstructorHeader) IDENT LPAREN RPAREN;


/*MethodDecl = (Type | ʺvoidʺ) ident ʺ(ʺ [FormPars] ʺ)ʺ {VarDecl} ʺ{ʺ {Statement} ʺ}ʺ.*/

MethodDeclListNonEmpty ::= (MethodDeclarationNonEmptyList) MethodDeclListNonEmpty MethodDecl
						| 
						(MethodDeclarationNonEmptySingleList) MethodDecl
						;
MethodDeclList ::= (MethodDeclarationList) MethodDeclList MethodDecl
               |
               (NoMethodDeclList) /* epsilon */
               ;
MethodDecl ::= (MethodDeclaration) MethodTypeName MethodDeclItem;

MethodTypeName ::= (MethodTypeNameWithType) Type:retType IDENT:methodName
			|
			(MethodTypeNameVoid) VOID IDENT:methodName
			;
MethodDeclItem ::=  (MethodDeclItemWithStatements) LPAREN FormalParams RPAREN VarDeclList LBRACE StatementList RBRACE
				|
				(MethodDeclItemNoStatements) LPAREN FormalParams RPAREN VarDeclList LBRACE RBRACE
				;


FormalParams ::= (FormalParamsList) FormalParamList:n
                 |
                 (FormalParamListError) error:e
                 {:
                 	parser.report_error("Uspesan oporavak od greske na liniji " + eleft + " za deklaraciju formalnog parametra funkcije, ignorisani znakovi do znaka )", null);
                 :}
                 |
                 (NoFormalParamsList) /* epsilon */
                 ;

FormalParamList ::= (FormalParamListActual) FormalParamList COMMA FormalParamListItem
                 |    
                 (FormalParamVar) FormalParamListItem
                 ;
FormalParamListItem ::= (FormalParametherListItem) Type VarDeclDefinition
					|
					(FormalParamCommaError) IDENT error:e
					{:
						parser.report_error("Uspesan oporavak od greske na liniji " + eleft + " za deklaraciju formalnog parametra funkcije, ignorisani znakovi do znaka , ili )", null);
					:}
					;


Type ::= (Type) IDENT:typeName;

/*Statement = [Label ":"] SingleStatement * za A nivo
				| Statements.
SingleStatement = DesignatorStatement ʺ;ʺ
			| ʺifʺ ʺ(ʺ Condition ʺ)ʺ Statement [ʺelseʺ Statement]
			| ʺdoʺ Statement ʺwhile ʺ ʺ(ʺ Condition ʺ)ʺ ʺ;ʺ
			| ʺbreakʺ ʺ;ʺ
			| ʺcontinueʺ ʺ;ʺ
			| ʺreturnʺ [Expr] ʺ;ʺ
			| ʺreadʺ ʺ(ʺ Designator ʺ)ʺ ʺ;ʺ
			| ʺprintʺ ʺ(ʺ Expr [ʺ,ʺ numConst] ʺ)ʺ ʺ;ʺ
			| ʺgotoʺ Label ʺ;ʺ. * za A nivo
Statements 	| ʺ{ʺ {Statement} ʺ}ʺ*/


Statement ::= (StatementWithLabel) StatementLabel SingleStatement
				| 
				(StatementWithoutLabel) SingleStatement
				;
				
				
StatementLabel ::= (StatementLabel) Label COLON;
StatementList ::= (ListOfStatements) StatementList Statement
			  	|
			  	(ListOfStatement) Statement
				;

SingleStatement ::= (DesignatorSingleStatement) DesignatorStatement SEMI
				|
				(IfStatement) IfPart ElseStatement
				|
				(DoStatement) DoPart WHILE LPAREN Condition RPAREN SEMI
				|
				(BreakStatement) BREAK SEMI
				|
				(ContinueStatement) CONTINUE SEMI
				|
				(ReturnStatementWithExpresion) RETURN Expr SEMI
				|
				(ReturnStatementWithoutExpresion) RETURN SEMI
				|
				(ReadStatement) READ LPAREN Designator RPAREN SEMI
				|
				(PrintStatementWithoutNumConst) PRINT LPAREN Expr RPAREN SEMI
                |   
                (PrintStatementWithNumConst) PRINT LPAREN Expr COMMA FactorForConst:f RPAREN SEMI
                |
                (GotoStatement) GOTO Label SEMI
                |
                (SuperStatement) SuperStart LPAREN RPAREN SEMI
                |
				(SingleMultiStatement) LBRACE StatementList RBRACE
				|
				(StatementError) error SEMI:e1
				{:
					parser.report_error("Uspesan oporavak od greske na liniji " + e1left + " pri dodeli vrednosti do ;", null);
				:}
				/* ovo se moze prebaciti u designatorItem ako pravi probleme */
				;
SuperStart ::= (SuperStart) SUPER;
DoStart ::= (DoStart) DO;
DoPart ::= (DoPart) DoStart StatementList;

ElseStatement ::= (ElseStatementStatement) ELSE Statement
               | 
               (NoElseStatement) /* epsilon */
               ;

IfPart ::= (IfPart) IfHeader Statement;
IfHeader ::= (IfHeader) IfStart Condition RPAREN;
IfStart ::= (IfStart) IF LPAREN;
/* Condition = CondTerm {ʺ||ʺ CondTerm}. */
Condition ::= (ConditionList) Condition OR CondTerm
			|
			(ConditionError) error:e
            {:
            	parser.report_error("Uspesan oporavak od greske na liniji " + eleft + " u logicnom izrazu kod if naredbe, oporavak do znaka ), ConditionError", null);
            :}
            |
			(SingleConditionList) CondTerm
	     	;
/* CondTerm = CondFact {ʺ&&ʺ CondFact}.
	CondFact = Expr [Relop Expr].*/
CondTerm ::= (ConditionTermList) CondTerm AND CondFact 
		  |
		  (SingleConditionTermList) CondFact
		  ;
CondFact ::= (SingleCondFact) Expr
		|
		(MultiCondFact) Expr Relop Expr
		;			


/* DesignatorStatement = Designator (Assignop Expr | ʺ(ʺ [ActPars] ʺ)ʺ | ʺ++ʺ | ʺ‐‐ʺ) */
DesignatorStatement ::= (DesignatorItemFuncCallWithParam) MethodNameDesignator LPAREN ActualPars RPAREN
					|
					(DesignatorItemInc) Designator INCREMENT
					|
					(DesignatorItemDec) Designator DECREMENT
					|
					(DesignatorAssignmentStatement) DesignatorForAssign Assignop Expr
					;
DesignatorForAssign ::=(DesignatorForAssign) Designator;
MethodNameDesignator ::= (MethodNameDesignator) Designator;


/* Expr = [ʺ-ʺ] Term {Addop Term}. */
Expr ::= (AddExpr) Expr:e Addop Term:t
	 	|
	 	(TermExpr) Term:t
	 	|
	 	(NegativeTermExpr) MINUS Term
	 	;
/* Term = Factor {Mulop Factor}. */
Term ::=(MulopTerm) Term:t1 Mulop Factor:t2
		| 
		(SingleTerm) Factor:t
		;


/*
Factor = Designator [ʺ(ʺ [ActPars] ʺ)ʺ]
| numConst
| charConst
| boolConst
| ʺnewʺ Type [ʺ[ʺ Expr ʺ]ʺ]
| ʺ(ʺ Expr ʺ)ʺ.
*/

FactorForConst ::= (ConstantNumberConst) NUMBER:val
				|
				(ConstantBoolConst) BOOLEAN:val
				|
				(ConstantCharConst) CHARACTER:val
				;
Factor ::= (NumberConst) NUMBER:val
		|
		(BoolConst) BOOLEAN:val
		|
		(CharConst) CHARACTER:val
		|
		(Variable) Designator
		|
		(MethodCall) DesignatorForMethodCall:d LPAREN ActualPars RPAREN
		|
		(NewFactor) NEW Type 
		|
		(NewFactorWithBrackets) NEW Type LBRACKET Expr RBRACKET
		|
		(ExprFactor) LPAREN Expr RPAREN
		;


/* ActPars = Expr {ʺ,ʺ Expr}. */		
ActualPars ::= (ActualParamMulti) ActualPars COMMA ActualParamSingleItem
			|
			(ActualParamSingle) ActualParamSingleItem
			|
			(NoActualParam) /*epsilon*/
			;
ActualParamSingleItem ::= (ActualParamSingleItem) Expr;
/*Designator = ident {ʺ.ʺ ident | ʺ[ʺ Expr ʺ]ʺ}.*/		

DesignatorForMethodCall ::= (DesignatorForMethodCall) Designator;
		
		
Designator ::= (SingleDesignator) IDENT:name
			|
			(DotDesignator) Designator DOT IDENT:name
			| 
			(ArrayDesignator)Designator LBRACKET Expr RBRACKET
			;
			
/*
Designator ::= (MultiDesignator) IDENT:name DesignatorMultiList
			|
			(SingleDesignator) IDENT:name
			;
DesignatorMultiList ::= (MultiDesign) DesignatorMultiList DesignatorMulti
					|
					(SingleDesign) DesignatorMulti
					;
DesignatorMulti ::= (DotDesignator) DOT IDENT
				|
				(ArrayDesignator) LBRACKET Expr RBRACKET
				;

*/
/*
Relop = ʺ==ʺ | ʺ!=ʺ | ʺ>ʺ | ʺ>=ʺ | ʺ<ʺ | ʺ<=ʺ.
Addop = ʺ+ʺ | ʺ‐ʺ.
Mulop = ʺ*ʺ | ʺ/ʺ | ʺ%ʺ.
*/
Addop ::= (AddPlus) PLUS
		|
		(AddMinus) MINUS
		;
Mulop ::= (MulMul) MULTIPLY
		| 
		(MulDiv) DEVIDE
		|
		(MulMod) MOD
		;
Assignop ::= (Assignop) EQUAL;

Label ::= (Label) IDENT:name;

Relop ::= (RelEqual) EQUALEQUAL 
		|
		(RelGEqual) GREATEROREQUAL 
		|
		(RelNEqual) NOTEQUAL 
		| 
		(RelLEqual) LESSOREQUAL 
		| 
		(RelGREATER) GREATER 
		| 
		(RelLess) LESS
		;
