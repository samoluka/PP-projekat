

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti token je: " + cur_token.toString(), cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


/*keywords*/
terminal PROG,PRINT,RETURN,BREAK,CLASS,ENUM,ELSE,CONST,IF,DO,WHILE,NEW,READ,EXTENDS,CONTINUE,THIS,SUPER,GOTO,RECORD,VOID;

/* Identifiers and Constants*/
terminal Integer NUMBER;
terminal Integer BOOLEAN;
terminal Character CHARACTER;
terminal String IDENT;


/* Operators */
terminal PLUS,MINUS,MULTIPLY,DEVIDE,EQUALEQUAL,NOTEQUAL,GREATEROREQUAL,LESSOREQUAL,AND,OR,EQUAL,INCREMENT,DECREMENT,SEMI,COLON,DOT,COMMA,LPAREN,RPAREN,LBRACKET,RBRACKET,LBRACE,RBRACE,LESS,GREATER;

nonterminal Program, DeclList, DeclItem, ConstDecl, ConstDeclItemList, AssignmentDecl, VarDecl, VarDeclItemList, VarDeclDefinition, RecordDecl, RecordDeclItemList, RecordDeclItem;
nonterminal ClassDecl, ClassExtends, ClassVarDeclItemList, ClassMethodDeclItemList, ClassDeclItem, MethodDeclList, Type, MethodDecl, VarDeclList;
nonterminal FormPars, StatementList, FormalParamList, FormalParamDecl, Statement;
nonterminal Designator, Expr, Term, Addop, Const, ActualPars, ActualParamList;
nonterminal Matched, Unmatched;

/* Program = ʺprogramʺ ident {ConstDecl | VarDecl | ClassDecl | RecordDecl} ʺ{ʺ {MethodDecl} ʺ}ʺ. */
Program ::= (Program) PROG IDENT:programName DeclList LBRACE MethodDeclList RBRACE;

DeclList ::= (DeclarationsList) DeclList DeclItem
			|
			(NoDeclList) /* epsilon */
			;
DeclItem ::= (ConstDeclartionItem) ConstDecl
		|
		(VarDeclarationItem) VarDecl
		|
		(RecordDeclarationItem) RecordDecl
		|
		(ClassDeclarationItem) ClassDecl
		;

/* ʺconstʺ Type identʺ=ʺ(numConst | charConst | boolConst) {, ident ʺ=ʺ (numConst |charConst | boolConst)} ʺ;ʺ.*/

ConstDecl ::=(ConstDecl) CONST Type ConstDeclItemList SEMI;

ConstDeclItemList ::= (ConstDeclMultiItemList) ConstDeclItemList COMMA AssignmentDecl
				|
				(ConstDeclSingleItemList) AssignmentDecl
				;
AssignmentDecl ::= (AssignmentDeclaration) IDENT:varName EQUAL Const;
			
/* varDecl = Type ident [ʺ[ʺ ʺ]ʺ] {ʺ,ʺ ident [ʺ[ʺ ʺ]ʺ]} ʺ; */	
VarDecl ::= (VarDeclarations) Type VarDeclItemList SEMI
		|  
		(VarDeclError) error:e SEMI
        {:
        	parser.report_error("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju globalne promenljive do ;", null);
        :}
        ;
VarDeclItemList ::= (VarDeclMultiItemList) VarDeclItemList COMMA VarDeclDefinition
                    |    
                    (VarDeclSinglItemList) VarDeclDefinition
                    |    
                    (VarDeclItemListError) error:e
                    {:
                    	parser.report_error("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju globalne promenljive do , ili ;", null);
                    :}
                    ;

VarDeclDefinition ::= (Definition) IDENT:name
   					|   
       				(DefinitionArray) IDENT:name LBRACKET RBRACKET
       				;

/* ʺrecordʺ ident ʺ{ʺ {VarDecl} ʺ}ʺ.  */

RecordDecl ::= (RecordDeclarations) RECORD IDENT:name LBRACE RecordDeclItemList RBRACE;
RecordDeclItemList ::= (RecordDeclarationsItemList) RecordDeclItemList RecordDeclItem
                    |    
                    (NoRecordDeclItemList) /* epsilon */
                    ;
RecordDeclItem ::= (RecordDeclItem) VarDecl;


/* ClassDecl = ʺclassʺ ident [ʺextendsʺ Type] ʺ{ʺ {VarDecl} [ʺ{ʺ [ConstructorDecl] {MethodDecl} ʺ}ʺ] ʺ}ʺ. */

ClassDecl ::= (ClassDeclarations) CLASS IDENT:className ClassExtends LBRACE ClassVarDeclItemList ClassMethodDeclItemList RBRACE;
ClassExtends ::= (ClassDeclarationsExtends) EXTENDS Type
			|
			(NoClassExtends) /* epsilon */
			;
ClassVarDeclItemList ::= (ClassDeclarationsItemList) ClassVarDeclItemList ClassDeclItem
                    |    
                    (NoClassVarDeclItemList) /* epsilon */
                    ;
ClassDeclItem ::= (ClassDeclItem) VarDecl;
ClassMethodDeclItemList ::= LBRACE RBRACE
						|
						(NoClassMethodDeclItemList) /* epsilon */
						;



Type ::= (Type) IDENT:typeName;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) Type:retType IDENT:methName LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE;


FormPars ::= (FormParams) FormalParamList
		  |
		  (NoFormParam) /* epsilon */
		  |
		  (ErrorStmtFormParam) error RPAREN:l
		  {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;
				
Statement ::= (MatchedStmt) Matched
		   |
		   (UnmatchedStmt) Unmatched
		   ; 

Unmatched ::= (UnmatchedIf) IF Expr Statement
		 	|
		 	(UnmatchedIfElse) IF Expr Matched ELSE Unmatched
		 	;
		 

Matched ::= (Assignment) Designator:dest EQUAL Expr:e SEMI
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
		   |
		   (PrintStmt) PRINT LPAREN Expr RPAREN SEMI
		   |
		   (ReturnExpr) RETURN Expr:t SEMI
		   |
		   (ReturnNoExpr) RETURN SEMI
		   |
		   (MatchedStatement) IF Expr Matched ELSE Matched
		   ;
			
Expr ::= (AddExpr) Expr:te Addop Term:t
	 |
	 (TermExpr) Term:t
	 ;

Term ::= (Term) Const:t;

Const ::= (NumberConst) NUMBER:val
		|
		(BoolConst) BOOLEAN:val
		|
		(CharConst) CHARACTER:val
		;
		
ActualPars ::= (Actuals) ActualParamList
			|
			(NoActuals) /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
				|
				(ActualParam) Expr
				;
				
Designator ::= (Designator) IDENT:name;

Addop ::= (Addop) PLUS;
		
		

